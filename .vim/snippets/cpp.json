{
  "info": {
    "prefix": "info",
    "body": [
      "/* ========================================================================",
      " *   Filename:       ${RELATIVE_FILEPATH}",
      " *   Description:    ${1:A C/C++ source file}",
      " *   Author:         ${2:<anonymous>}",
      " *   Created:        ${3:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}}",
      " *   History:        ${4:-}",
      " * ========================================================================*/",
      "$0"
    ],
    "descriptioin": "File info"
  },
  "class": {
    "prefix": "class",
    "description": "Class declaration",
    "body": [
      "class ${1:ClassName} {",
      " public:",
      "\t$1();",
      "\t$1(const $1 &);",
      "\t$1($1 &&);",
      "\t$1 & operator=(const $1 &);",
      "\t$1 & operator=($1 &&);",
      "\t~$1();",
      "\t$2",
      " private:",
      "\t$0",
      "}; /* class $1 */"
    ]
  },
  "struct": {
    "prefix": "struct",
    "description": "Struct declaration",
    "body": [
      "struct ${1:StructName} {",
      "\t$0",
      "}; /* struct $1 */"
    ]
  },
  "structc": {
    "prefix": "structc",
    "description": "C Struct declaration",
    "body": [
      "typedef struct ${1:StructName} {",
      "\t$0",
      "} $1;"
    ]
  },
  "enum": {
    "prefix": "enum",
    "description": "Enumerator declaration",
    "body": [
      "enum ${1:EnumName}{",
      "\t$0",
      "};"
    ]
  },
  "enumc": {
    "prefix": "enumc",
    "description": "Enumerator class declaration",
    "body": [
      "enum class ${1:EnumName}{",
      "\t$0",
      "};"
    ]
  },
  "guard": {
    "prefix": "guard",
    "description": "Include guard",
    "body": [
      "#ifndef ${1:${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H}",
      "#define $1",
      "",
      "$0",
      "",
      "#endif /* $1 */",
      ""
    ]
  },
  "inc": {
    "prefix": "inc",
    "description": "Include system header",
    "body": [ "#include <$1>$0" ]
  },
  "incc": {
    "prefix": "incc",
    "description": "Include local header",
    "body": [ "#include \"$1\"$0" ]
  },
  "for": {
    "prefix": "for",
    "description": "For loop using indices",
    "body": [
      "for (size_t ${1:i} = 0; $1 < ${2:length}; ++$1){",
      "\t$0",
      "}"
    ]
  },
  "forr": {
    "prefix": "forr",
    "description": "For loop using range",
    "body": [
      "for (auto & ${1:it} : ${2:vec}){",
      "\t$0",
      "}"
    ]
  },
  "forv": {
    "prefix": "forv",
    "description": "For loop using iterators",
    "body": [
      "for (auto ${1:it} = ${2:vec}.begin(); $1 != $2.end(); ++$1){",
      "\t$0",
      "}"
    ]
  },
  "while": {
    "prefix": "while",
    "description": "While loop",
    "body": [
      "while (${1:true}){",
      "\t$0",
      "}"
    ]
  },
  "if": {
    "prefix": "if",
    "description": "If statement",
    "body": [
      "if (${1:true}){",
      "\t$0",
      "}"
    ]
  },
  "elif": {
    "prefix": "elif",
    "description": "Else if statement",
    "body": [
      "else if (${1:true}){",
      "\t$0",
      "}"
    ]
  },
  "switch": {
    "prefix": "switch",
    "description": "Switch statement",
    "body": [
      "switch (${1:var}){",
      "\tcase ${2:first_case}:",
      "\t\t$0",
      "\t\tbreak;",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ]
  },
  "def": {
    "prefix": "def",
    "description": "#define declaration",
    "body": [
      "#define $1 $0"
    ]
  },
  "ifdef": {
    "prefix": "ifdef",
    "description": "#ifdef declaration",
    "body": [
      "#ifdef ${1:DEBUG}",
      "$0",
      "#endif /* $1 */"
    ]
  },
  "ifndef": {
    "prefix": "ifndef",
    "description": "#ifndef declaration",
    "body": [
      "#ifndef ${1:DEBUG}",
      "$0",
      "#endif /* $1 */"
    ]
  },
  "ns": {
    "prefix": "ns",
    "description": "#ifdef declaration",
    "body": [
      "namespace ${1:space}{",
      "",
      "$0",
      "",
      "} /* namespace $1 */"
    ]
  },
  "main": {
    "prefix": "main",
    "description": "Main function",
    "body": [
      "int main(int argc, char * argv[]){",
      "\t$0",
      "",
      "\treturn 0;",
      "}"
    ]
  }
}

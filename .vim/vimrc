" VIMRC
let $MYVIMRC = expand('<script>')
let $VIMCONFIGROOT = fnamemodify(expand('$MYVIMRC'), ':p:h')

"> VARIABLES {{{1

" Some global variables
let g:sign_error = 'E'
let g:sign_warning = 'W'
let g:sign_hint = 'H'
let g:sign_info = 'i'

" Leaders
let mapleader="\<Space>"
let maplocalleader="\<Space>\<Space>"

let g:autocomplete_enable = 1

" Global options
" let g:autocomplete_enable = 1
" let g:autocomplete_min_chars = 2
" let g:autocomplete_func = ''
" let b:autocomplete_func = ''

" ---------- }}}1

"> SETTINGS {{{1

" Check this because reloading would automatically load nocompatible options
" and overwrite any filetype settings alrady set
if (&compatible) | set nocompatible | endif

if (has('win32'))
  set runtimepath+=$VIMCONFIGROOT
  set runtimepath+=$VIMCONFIGROOT/after
  language en_US.utf8
endif

if (has('nvim'))
  set runtimepath+=$VIMCONFIGROOT
  set runtimepath+=$VIMCONFIGROOT/after
endif

if (!has('nvim'))
set viminfofile=$VIMCONFIGROOT/viminfo
endif

set guioptions=!cdfi
set guifont=Bitstream\ Vera\ Sans\ Mono\ 10,Consolas:h11

colorscheme micrac

set sessionoptions=blank,buffers,sesdir,folds,help,tabpages,winpos,winsize,
      \resize,terminal,skiprtp
set viewoptions=""
set notermguicolors
set splitbelow
set splitright
set winminheight=0
set winminwidth=0
set number
set relativenumber
set ruler
set nojoinspaces
set wildmenu
set wildmode=lastused:full
set wildoptions=pum,fuzzy " Vertical wild menu in cmdline
set wildignore=*/.git/*,*/.vscode/*,*.o,*.class,*.so
set wildignorecase
set fileformats=unix,dos,mac
set showcmd
set virtualedit=block
set switchbuf=uselast
set shortmess-=S " show match count
set lazyredraw " don't update during macros
set scrolloff=4
set foldlevelstart=3
set timeout
set timeoutlen=5000
set ttimeout
set ttimeoutlen=0
set mouse=a
set belloff=all
set hidden
set updatetime=0
set foldmethod=marker
filetype plugin indent on
set history=1000
set tabstop=2
set shiftwidth=0
set softtabstop=-1
set expandtab
set shiftround
set completeslash=slash
set incsearch
set hlsearch
set noundofile
set noswapfile
set nobackup
set encoding=utf-8
set completeopt=menu,menuone,preview,noinsert
if (has('patch-9.1.0463'))
  set completeopt+=fuzzy
endif
set fillchars=vert:\ ,fold:\ ,foldclose:▶,foldopen:▼,foldsep:│
let g:listchars = 'set listchars=tab:▬▬►,trail:¤,leadmultispace:│'..repeat('\ ',&ts-1)
exe get(g:, 'listchars')
syntax enable
if (&omnifunc == '') | set omnifunc=syntaxcomplete#Complete | endif
set dictionary=/usr/share/dict/words
set tags+=~/.vim/systags

set laststatus=2 " Statusline

set statusline=%!MyStatusLine()
set tabline=%!MyTabLine()
set foldtext=MyFoldText()
let &t_SI = "\e[6 q"
let &t_SR = "\e[4 q"
let &t_EI = "\e[2 q"
set guicursor=
      \n-v-ve-o-c-sm:block-Cursor/lCursor-blinkon0,
      \i-ci:ver25-Cursor/lCursor-blinkon0,
      \r-cr:hor20-Cursor/lCursor-blinkon0
" Ps = 0  -> blinking block.
" Ps = 1  -> blinking block (default).
" Ps = 2  -> steady block.
" Ps = 3  -> blinking underline.
" Ps = 4  -> steady underline.
" Ps = 5  -> blinking bar (xterm).
" Ps = 6  -> steady bar (xterm).
" ---------- }}}1

"> FUNCTIONS {{{1
" Surround visual selection (or motion) with strings {{{
function! SurroundWithStrings(left_string = '<==', right_string = '==>', type = '') abort
  if a:type == ''
    let &operatorfunc = function('SurroundWithStrings', [a:left_string,a:right_string])
    return 'g@'
  endif

  let save_mark = [getcharpos("'["), getcharpos("']"), getcharpos("'a"), getcharpos("'b")]
  call setcharpos("'a", save_mark[0])
  call setcharpos("'b", save_mark[1])
  try
    " TODO dont run normal!
    let left_len = len(a:left_string)
    if a:type == 'char'
      execute 'silent noautocmd keepjumps normal! `ai'..a:left_string..
            \ "\<Esc>`b"..(save_mark[1][2] + (save_mark[0][1] == save_mark[1][1]
            \ && left_len != 0 ? left_len : 0))..'|a'..a:right_string.."\<Esc>"
    elseif a:type == 'line'
      execute 'silent noautocmd keepjumps normal! `a^i'..a:left_string..
            \ "\<Esc>`b$a"..a:right_string.."\<Esc>"
    elseif a:type == 'block'
      execute 'silent noautocmd keepjumps normal! gvI'..a:left_string.."\<Esc>"
            \ 'gv'..(save_mark[1][2]+left_len)..'|A'..a:right_string.."\<Esc>"
    endif
  finally
    call setcharpos("'[", save_mark[0])
    call setcharpos("']", save_mark[1])
    call setcharpos("'a", save_mark[2])
    call setcharpos("'b", save_mark[3])
  endtry
endfunction
"}}}

" CompleteSpell (kinda useless) {{{
function! CompleteSpell(findstart, base)
  if a:findstart
    " locate the start of the word
    let line = getline('.')
    let start = col('.') - 1
    while start > 0 && line[start - 1] !~ '\s'
      let start -= 1
    endwhile
    return start
  else
    let suggestions = spellsuggest(a:base, 15, ('A' >= a:base[0] && a:base[0] <= 'Z'))

    return suggestions == [] ? v:null : {'words':suggestions,'refresh':'always'}
  endif
endfunction
"}}}

" AutoComplete {{{
function! AutoComplete(func=v:null, min_chars=get(g:, 'autocomplete_min_chars', 2), allow_when_pum = 0) abort
  if (get(b:, 'autocomplete_debounce', 0))|let b:autocomplete_debounce=0|return ''|endif
  if (get(g:, 'autocomplete_enable', 0)
        \ && (!a:min_chars || getline('.')[col('.')-1-a:min_chars:col('.')-2] =~
        \ '^[[:graph:]]\{'..a:min_chars..'\}$')
        \ && (!pumvisible() || a:allow_when_pum))
    let Func = a:func != v:null ? a:func
          \ : (get(b:, 'autocomplete_func', '') != '' ? function(b:autocomplete_func)
          \ : (get(g:, 'autocomplete_func', '') != '' ? function(g:autocomplete_func)
          \ : (&omnifunc != '' ? function(&omnifunc)
          \ : v:null)))
    let save_pos = getcurpos()
    let col = Func != v:null ? Func(1, '') : -1
    call setpos('.', save_pos)
    if (col >= 0) " ignore negative columns
      let list = Func(0, getline('.')[col:col('.')])
      call setpos('.', save_pos)
      if (type(list) == type([]))
        " call timer_start(0, { timer -> complete(col+1, list) })
        call complete(col+1, list)
      endif
    endif
  endif
  return ''
endfunction
"}}}

" Get LSP progress string {{{
function! GetLspProgressString()
  let s = ''
  let pp = lsp#get_progress()
  "[{'token': 'rustAnalyzer/Indexing',
  "'title': 'Indexing', 'server': 'rust-analyzer'}]
  "'percentage': 16,
  "'message': '1/6 (core)',
  if (pp != [])
    let p = pp[0]
    let s .= '['..p.server..'] '..p.title..' '..p.message
  endif
  return s
endfunction
"}}}

" Get LSP status string {{{
function! GetLspStatusString()
  let s = ''
  let status = lsp#collect_server_status()
  for key in keys(status)
    if (status[key].status == 'running')
      let s .= (s == '' ? '' : ', ')..key
    endif
  endfor
  return s != '' ? '['..s..']' : s
endfunction
"}}}

" Get LSP breadcrumbs string {{{
function! GetLspBreadcrumbsString(window)
  let symbols = getwinvar(a:window, 'lsp_breadcrumbs', v:null)
  if (symbols == v:null || len(symbols) == 0) | return '' | endif
  let s = '> '..join(symbols, ' > ')
  return s
endfunction
"}}}

" Get LSP diagnostics {{{
function! GetLspDiagnostics(id)
  if (exists('*lsp#internal#diagnostics#state#_get_diagnostics_count_for_buffer'))
    return lsp#internal#diagnostics#state#_get_diagnostics_count_for_buffer(a:id)
  endif
  return {'information': 0, 'hint': 0, 'warning': 0, 'error': 0}
endfunction
"}}}

" Get LSP diagnostics string {{{
function! GetLspDiagnosticsString(table, color = '')
  let s = ''
  if (a:table.information)
    let s .= s == '' ? '' : a:color..' '
    let s .= ''..g:sign_info..a:table.information
  endif
  if (a:table.hint)
    let s .= s == '' ? '' : a:color..' '
    let s .= ''..g:sign_hint..a:table.hint
  endif
  if (a:table.warning)
    let s .= s == '' ? '' : a:color..' '
    let s .= '%#Todo#'..g:sign_warning..a:table.warning
  endif
  if (a:table.error)
    let s .= s == '' ? '' : a:color..' '
    let s .= '%#Error#'..g:sign_error..a:table.error
  endif
  return s
endfunction
"}}}

" Update document symbols {{{
function! UpdateLspDocumentSymbols(buffer)
  " For perfomance reasons this function should only be ran when the document
  " structure changes, not when the cursor moves.
  let servers = filter(lsp#get_allowed_servers(), 'lsp#capabilities#has_document_symbol_provider(v:val)')
  if (len(servers) == 0)
    " We can't remove the variable, since there is no function alternative for
    " unlet
    call setbufvar(a:buffer, 'lsp_symbols', [])
    return 1
  endif

  call lsp#send_request(servers[0], {
        \   'method': 'textDocument/documentSymbol',
        \   'params': {
        \     'textDocument': lsp#get_text_document_identifier(),
        \   },
        \   'on_notification': function('s:handle_symbols', [servers[0], lsp#_new_command(), a:buffer]),
        \ })
endfunction

function! s:handle_symbols(server, last_command_id, buffer, data)
  if a:last_command_id != lsp#_last_command() | return | endif
  " I hope to god this is never needed. Use in case the LSP server does NOT
  " return sorted symbols

  " call setbufvar(a:buffer, 'lsp_symbols',
  "       \ sort(a:data['response']['result'], {a, b ->
  "       \   get(a, 'location', a)['range']['start']['line']
  "       \   == get(b, 'location', b)['range']['start']['line']
  "       \     ? (get(a, 'location', a)['range']['start']['character']
  "       \        - get(b, 'location', b)['range']['start']['character'])
  "       \   : get(a, 'location', a)['range']['start']['line']
  "       \     > get(b, 'location', b)['range']['start']['line']
  "       \       ? 1 : -1
  "       \}))
  call setbufvar(a:buffer, 'lsp_symbols', a:data['response']['result'])

  " Update visible status lines
  for window in win_findbuf(a:buffer)
    call UpdateLspDocumentBreadcrumbs(win_id2win(window))
  endfor

  redrawstatus!
endfunction
"}}}

" Update LSP breadcrumbs {{{
function! UpdateLspDocumentBreadcrumbs(window)
  if (a:window == 0) | return 1 | endif
  let win_id = win_getid(a:window)
  let current = getbufvar(winbufnr(a:window), 'lsp_symbols', v:null)

  " TODO support symbol types somehow (directly output string?)

  " supports both hierarchicalDocumentSymbolSupport true and false
  let bc = []
  if (current != v:null)
    let has_children = v:true
    while (has_children)
      let has_children = v:false
      let max_start = [0,0]
      let min_end = [line('$', win_id) - 1, col('$', win_id) - 1]
      for symbol in current
        let pos = [line('.', win_id) - 1, col('.', win_id) - 1]

        let range = has_key(symbol, 'location') ? symbol['location']['range'] : symbol['range']
        let start = [range['start']['line'], range['start']['character']]
        let end = [range['end']['line'], range['end']['character']]

        " optimization, no need to check further symbols
        if (start[0] < max_start[0] || end[0] > min_end[0]) | break | endif

        if ((pos[0] > start[0] || (pos[0] == start[0] && pos[1] >= start[1]))
              \&& (pos[0] < end[0] || (pos[0] == end[0] && pos[1] < end[1])))
          call add(bc, symbol['name'])
          let max_start = start
          let min_end = end
          if (has_key(symbol, 'children'))
            let current = symbol['children']
            let has_children = v:true
            break
          endif
        endif
      endfor
    endwhile
  endif

  call setwinvar(a:window, 'lsp_breadcrumbs', bc)
endfunction
"}}}

" Tabline {{{
function! MyTabLine()
  let s = ''
  let s .= '%#TabLineSel#'

  for i in range(tabpagenr('$'))
    let n = (i + 1)
    let color = n == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#'
    let buflist = tabpagebuflist(n)
    let fullname = bufname(buflist[tabpagewinnr(n) - 1])
    let filename = fnamemodify(fullname, ':t')

    " Diagnostics calculation
    let diagnosticsstring = ''
    if (get(g:, 'tabline_lsp_diagnostics', 0))
      let d = {'information': 0, 'hint': 0, 'warning': 0, 'error': 0}
      for bufnr in buflist
        let tmp = GetLspDiagnostics(bufnr)
        let d.information += tmp.information
        let d.hint += tmp.hint
        let d.warning += tmp.warning
        let d.error += tmp.error
      endfor
      let diagnosticsstring = GetLspDiagnosticsString(d, color)
    endif

    let s .= color

    " Begin tab
    let s .= '%' .. n .. 'T'

    " Tab number
    let s .= ' ' .. n .. '.'

    " Filename
    let s .= filename == '' ?
          \ ' [No Name] ' : ' '..pathshorten(fnamemodify(fullname, ':~:.'))..' '

    " Diagnostics
    let s .= diagnosticsstring .. color .. (diagnosticsstring == '' ? '' : ' ')

    " Modified indicator
    let modified = 0
    for bufnr in buflist
      if getbufvar(bufnr, '&modified')
            \ && getbufvar(bufnr, '&buftype') != 'terminal'
        let modified = 1
        break
      endif
    endfor
    let s .= modified ? '[+] ' : ' '

    " Separator
    let s .= '%#TabLine#│'
  endfor

  " Rest of the line
  let s .= '%T%#TabLineFill#'
  if (get(g:, 'tabline_lsp_progress', 0))
    let s .= GetLspProgressString()
  endif
  let s .= '%='

  let st = ''
  if (get(g:, 'tabline_lsp_status', 0))
    let st = GetLspStatusString()
    let s .= st != '' ? st : 'UwU'
  endif
  let s .= '%<'

  return s
endfunction
"}}}

" Statusline {{{
function! MyStatusLine()
  let d = get(g:, 'statusline_lsp_diagnostics', v:false) ?
        \ GetLspDiagnosticsString(
        \   GetLspDiagnostics(winbufnr(g:statusline_winid))
        \ ) : ''
  let b = get(g:, 'statusline_lsp_breadcrumbs', v:false) ? substitute(
        \   GetLspBreadcrumbsString(win_id2win(g:statusline_winid)), "'", "''", 'g'
        \ ) : ''
  let s = "
        \%(%#NonText#%{%&paste ? '[PASTE]' : ''%}%* %)
        \%(%f%)
        \%( %{%'"..d.."'%}%)%*
        \%( %h%w%m%r%)%<
        \%( %{%'"..b.."'%}%)%*%=
        \%( %{&endofline ? '' : '[noeol]'} /%)
        \%( %{&fenc} /%)
        \%( %{%get({'unix':'U','dos':'D','mac':'M'}, &ff, '')%} /%)
        \%( %{&ft} /%)
        \%( [%l:%c%V] / %L%)
        \"
  return s
endfunction
"}}}

" Foldtext {{{
function! MyFoldText()
  return (&foldcolumn?'':v:folddashes[1:]..'▶')..
        \ printf(' %3s ∙ ',v:foldend-v:foldstart)..
        \ substitute(foldtext(),'^+-*\s*\d\+ lines: ','','')
endfunction
"}}}

" Rename {{{
function! Rename(original_file="") abort
  " TODO git integration (git mv)
  " TODO allow argument to specify which file to rename
  call inputsave()
  let new_name = input('New name: ', expand('%'))
  call inputrestore()

  let old_absolute = expand('%:p')
  " Check if new name is the same as the old one
  if old_absolute == fnamemodify(new_name, ':p')
    echo ' Aborting rename, new_name == old_name'
    return ''
  endif

  " Attempt to save
  try
    execute 'saveas ' .. new_name
  catch
    echo ' Could not save to ' .. new_name
    return ''
  endtry

  " Remove the old buffer
  execute 'bd ' .. old_absolute

  " Delete the old file
  try
    call delete(old_absolute)
  catch
    echo ' Could not delete old file ' .. old_absolute
  endtry
  return ''
endfunction
"}}}

" Close empty nameless buffers {{{
function! CleanNoNameEmptyBuffers()
  " TODO make it so this does not close them on other tabs
  let buffers = filter(range(1, bufnr('$')), "buflisted(v:val)
        \ && empty(bufname(v:val)) && empty(win_findbuf(v:val))
        \ && (getbufline(v:val, 1, '$') == [''])")
  if !empty(buffers)
    exe 'bd ' .. join(buffers, ' ')
    echo len(buffers) .. ' buffer' .. (len(buffers) != 1 ? 's' : '') .. ' deleted'
  else
    echo 'No buffer deleted'
  endif
endfunction
"}}}

" C/CPP switch source and header files {{{
function! CppSwitchSourceHeader(force)
  let extension = expand('%:e')
  let fullpath = expand('%:p:r')

  " CPP
  if (extension == 'cpp')
    if (filereadable(fullpath..'.hpp'))
      exe 'edit '..fullpath..'.hpp'
    elseif (filereadable(fullpath..'.h') || a:force)
      exe 'edit '..fullpath..'.h'
    endif
  " C
  elseif (extension == 'c')
    if (filereadable(fullpath..'.h') || a:force)
      exe 'edit '..fullpath..'.h'
    endif
  " H
  elseif (extension == 'h')
    if (filereadable(fullpath..'.c'))
      exe 'edit '..fullpath..'.c'
    elseif (filereadable(fullpath..'.cpp') || a:force) " assume cpp file
      exe 'edit '..fullpath..'.cpp'
    endif
  " HPP
  elseif (extension == 'hpp')
    if (filereadable(fullpath..'.cpp') || a:force)
      exe 'edit '..fullpath..'.cpp'
    endif
  else
    echo "Can not switch source/header: not a source/header file."
  endif
endfunction
"}}}

" Expose some of the functions
command! CleanNoNameEmptyBuffers call CleanNoNameEmptyBuffers()
command! -nargs=? -complete=file Rename call Rename("<args>")
" ---------- }}}1

"> MAPPINGS {{{1
" Dummy mappings {{{
map Q :<C-u>echo 'Have a nice day :)'<CR>
nnoremap <silent> <Esc> :silent noh<CR>
nnoremap <leader> <Nop>
vnoremap <leader> <Nop>
nnoremap <localleader> <Nop>
vnoremap <localleader> <Nop>

" <localleader>
for c in range(char2nr('a'), char2nr('z')) + range(char2nr('0'), char2nr('9'))
  execute "nnoremap <localleader>"..nr2char(c)
        \.." :echo '[NO LOCAL MAPPING] "..nr2char(c).."'<CR>"
endfor
"}}}

" LSP {{{
for c in range(char2nr('a'), char2nr('z')) + range(char2nr('0'), char2nr('9'))
  execute "nnoremap <leader>l"..nr2char(c)
        \.." :echo '[LSP MISSING] l"..nr2char(c).."'<CR>"
endfor
nnoremap <localleader>[g ":echo '[LSP MISSING] [g'<CR>"
nnoremap <localleader>]g ":echo '[LSP MISSING] ]g'<CR>"
nnoremap <localleader>[d ":echo '[LSP MISSING] [d'<CR>"
nnoremap <localleader>]d ":echo '[LSP MISSING] ]d'<CR>"
inoremap <buffer> <C-s> <C-o><plug>(lsp-signature-help)
"}}}

" CSI fuckery {{{
if (!has('nvim'))
" fix terminal mode <C-Space>
map <C-@> <C-Space>
imap <C-@> <C-Space>
tmap <C-@> <C-Space>

" (needs to be rebound to avoid waiting for timeout on <Esc>)
for c in range(char2nr('a'), char2nr('z')) + range(char2nr('0'), char2nr('9'))
  execute 'set <A-'..nr2char(c)..">=\<Esc>"..nr2char(c)
endfor
endif
"}}}

" Terminal buffer fixes {{{
tnoremap <C-x> <C-\><C-n>
tnoremap <C-\><C-x> <C-x>
tnoremap <C-w> <C-w>.
"}}}

" Configuring {{{
nnoremap <leader>r :so $MYVIMRC<CR>:echo 'Vimrc reloaded'<CR>
nnoremap <leader>R :let &ft=&ft<CR>:echo 'Filetype reloaded'<CR>
nnoremap <leader>E :tab drop $MYVIMRC<CR>
"}}}

" Unify <C-n>/<C-p> and <Up>/<Down> in command mode {{{
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
"}}}

" Window navigation {{{
nnoremap <C-\> <C-w>
nnoremap <C-\><C-\> <C-w><C-w>
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
nnoremap <A-Left> <C-w>h
nnoremap <A-Down> <C-w>j
nnoremap <A-Up> <C-w>k
nnoremap <A-Right> <C-w>l

tnoremap <C-\> <C-w>
tnoremap <C-\><C-\> <C-w><C-w>
tnoremap <A-h> <C-w>h
tnoremap <A-j> <C-w>j
tnoremap <A-k> <C-w>k
tnoremap <A-l> <C-w>l
tnoremap <A-Left> <C-w>h
tnoremap <A-Down> <C-w>j
tnoremap <A-Up> <C-w>k
tnoremap <A-Right> <C-w>l
"}}}

" Window resize {{{
nnoremap <silent> <A-c> :resize -2 <CR>
nnoremap <silent> <A-v> :resize +2 <CR>
nnoremap <silent> <A-a> :vertical resize -2<CR>
nnoremap <silent> <A-s> :vertical resize +2<CR>
nnoremap <A-f> <C-w>_<C-w><Bar>
nnoremap <A-e> <C-w>=
nnoremap <expr> <A-d> execute('vert resize ' .. &columns * 2 / 3)

tnoremap <silent> <A-c> <C-w>:resize -2 <CR>
tnoremap <silent> <A-v> <C-w>:resize +2 <CR>
tnoremap <silent> <A-a> <C-w>:vertical resize -2<CR>
tnoremap <silent> <A-s> <C-w>:vertical resize +2<CR>
tnoremap <A-f> <C-w>_<C-w><Bar>
tnoremap <A-e> <C-w>=
tnoremap <expr> <A-d> execute('vert resize ' .. &columns * 2 / 3)
"}}}

" Buffers {{{
nnoremap <leader>b :ls<CR>:b<Space>
nnoremap <leader>D :ls<CR>:bd<Space>
nnoremap <leader>n :bnext<CR>
nnoremap <leader>p :bprev<CR>
nnoremap <leader>x :bd<CR>
nnoremap <leader>X :bd!<CR>
nnoremap <leader>e :enew<CR>
nnoremap <leader><Tab> <C-^>
"}}}

" Options toggle {{{
nnoremap <leader>s <Nop>
nnoremap <silent> <leader>sa :let g:autocomplete_enable=!g:autocomplete_enable<CR>
      \:echo 'Autocomplete: '..(g:autocomplete_enable?'ON':'OFF')<CR>
nnoremap <silent> <leader>sb :let &bg=&bg=='dark'?'light':'dark'<CR>
nnoremap <silent> <leader>sc :let &t_Co=&t_Co==256?16:256<CR>:echo 'Terminal colors: '..&t_Co<CR>
nnoremap <silent> <leader>sf :let &foldcolumn=&foldcolumn?0:4<CR>
nnoremap <silent> <leader>sl :set list!<CR>:echo 'List '..(&list?'ON':'OFF')<CR>
nnoremap <silent> <leader>sn :set nu!\|let &rnu=&nu<CR>:echo 'Numbers: '..(&nu?'ON':'OFF')<CR>
nnoremap <silent> <leader>sp :set paste!<CR>:echo 'Paste: '..(&paste?'ON':'OFF')<CR>
nnoremap <silent> <leader>ss :setlocal spell!<CR>:echo 'Spellcheck '..(&spell?'ON':'OFF')<CR>
nnoremap <silent> <leader>s<bar> :let &colorcolumn=&colorcolumn==''?'+1':''<CR>
"}}}

" Finding {{{
nnoremap <leader>f :e ./**/*
"}}}

" Tabs {{{
nnoremap <leader>t <Nop>
nnoremap <leader>tn :tabnew<CR>
nnoremap <leader>te :tabedit<Space>

nnoremap <C-Tab> g<Tab>
nnoremap <A-t> g<Tab>
nnoremap <A-n> gt
nnoremap <A-p> gT
nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt

tnoremap <C-Tab> <C-w>g<Tab>
tnoremap <A-t> <C-w>g<Tab>
tnoremap <A-n> <C-w>gt
tnoremap <A-p> <C-w>gT
tnoremap <A-1> <C-w>1gt
tnoremap <A-2> <C-w>2gt
tnoremap <A-3> <C-w>3gt
tnoremap <A-4> <C-w>4gt
tnoremap <A-5> <C-w>5gt
tnoremap <A-6> <C-w>6gt
tnoremap <A-7> <C-w>7gt
tnoremap <A-8> <C-w>8gt
tnoremap <A-9> <C-w>9gt

nnoremap <leader>tm <Nop>
nnoremap <silent> <leader>tm1 :tabmove 0<CR>
nnoremap <silent> <leader>tm2 :tabmove 2<CR>:tabmove 1<CR>
nnoremap <silent> <leader>tm3 :tabmove 3<CR>:tabmove 2<CR>
nnoremap <silent> <leader>tm4 :tabmove 4<CR>:tabmove 3<CR>
nnoremap <silent> <leader>tm5 :tabmove 5<CR>:tabmove 4<CR>
nnoremap <silent> <leader>tm6 :tabmove 6<CR>:tabmove 5<CR>
nnoremap <silent> <leader>tm7 :tabmove 7<CR>:tabmove 6<CR>
nnoremap <silent> <leader>tm8 :tabmove 8<CR>:tabmove 7<CR>
nnoremap <silent> <leader>tm9 :tabmove 9<CR>:tabmove 8<CR>
"}}}

" Movement in insert mode {{{
inoremap <C-h> <left>
inoremap <C-l> <right>
"}}}

" Moving lines {{{
nnoremap <C-h> <<
nnoremap <C-j> :m .+1<cr>
nnoremap <C-k> :m .-2<cr>
nnoremap <C-l> >>
nnoremap <C-Left> <<
nnoremap <C-Down> :m .+1<cr>
nnoremap <C-Up> :m .-2<cr>
nnoremap <C-Right> >>

vnoremap <C-h> <gv
vnoremap <C-j> :m '>+1<cr>gv
vnoremap <C-k> :m '<-2<cr>gv
vnoremap <C-l> >gv
vnoremap <C-Left> <gv
vnoremap <C-Down> :m '>+1<cr>gv
vnoremap <C-Up> :m '<-2<cr>gv
vnoremap <C-Right> >gv
"}}}

" Autocomplete {{{
if (!has('nvim'))
inoremap <silent> <C-Space> <C-r>=AutoComplete(v:null, 0)<CR>
endif

inoremap <expr> / complete_info()['mode']=='files' ? '/<C-x><C-f>' : '/'
inoremap <silent> <C-f> <C-x><C-f>
inoremap <expr> <C-w> complete_info()['mode']=='files' ? '<C-w><C-x><C-f>' : '<C-w>'
"}}}

" Insert mode inserts {{{
inoremap <C-a>D <C-r>=strftime('%Y-%m-%dT%H:%M:%S')<CR>
inoremap <C-a>d <C-r>=strftime('%Y-%m-%d')<CR>
"}}}

" Matching pairs {{{
if (!has('nvim')) " nvim has plugin for this
inoremap <S-Tab> <nop>

inoremap " ""<C-G>U<left>
inoremap "<Esc> "<Esc>
inoremap <S-Tab>" "
inoremap "" ""

inoremap ' ''<C-G>U<left>
inoremap '<Esc> '<Esc>
inoremap <S-Tab>' '
inoremap '' ''

inoremap ` ``<C-G>U<left>
inoremap `<Esc> `<Esc>
inoremap <S-Tab>` `
inoremap `` ``

inoremap ( ()<C-G>U<left>
inoremap (<Esc> (<Esc>
inoremap <S-Tab>( (
inoremap () ()

inoremap [ []<C-G>U<left>
inoremap [<Esc> [<Esc>
inoremap <S-Tab>[ [
inoremap [] []

inoremap { {}<C-G>U<left>
inoremap {<Esc> {<Esc>
inoremap <S-Tab>{ {
inoremap {} {}
inoremap {<CR> {<CR>}<C-G>U<up><end><CR>
endif
"}}}

" Surround with string {{{
noremap <expr> <leader>< SurroundWithStrings('<', '>')
ounmap <leader><
noremap <expr> <leader>> SurroundWithStrings('<', '>')
ounmap <leader>>

noremap <expr> <leader>" SurroundWithStrings('"', '"')
ounmap <leader>"

noremap <expr> <leader>' SurroundWithStrings("'", "'")
ounmap <leader>'

noremap <expr> <leader>` SurroundWithStrings('`', '`')
ounmap <leader>`

noremap <expr> <leader>( SurroundWithStrings('(', ')')
ounmap <leader>(
noremap <expr> <leader>) SurroundWithStrings('(', ')')
ounmap <leader>)

noremap <expr> <leader>[ SurroundWithStrings('[', ']')
ounmap <leader>[
noremap <expr> <leader>] SurroundWithStrings('[', ']')
ounmap <leader>]

noremap <expr> <leader>{ SurroundWithStrings('{', '}')
ounmap <leader>{
noremap <expr> <leader>} SurroundWithStrings('{', '}')
ounmap <leader>}

" Used for bash and javascript
noremap <expr> <leader>$ SurroundWithStrings('${', '}')
ounmap <leader>$
"}}}

" System clipboard manipulation {{{
nnoremap ? "+
vnoremap ? "+
"}}}

" Jump to next help tag {{{
nnoremap ]j :call search('\|.*\|', 's')<CR>
nnoremap [j :call search('\|.*\|', 'bs')<CR>
"}}}

" Other (misc.) {{{
" Evaluate command from buffer and paste there
nnoremap <leader><C-e> <Nop>
nnoremap <leader><C-e><C-v> <Nop>
nnoremap <leader><C-e><C-v><C-a> <Nop>
nnoremap <leader><C-e><C-v><C-a><C-l> dd:put!=execute(':@\"')<CR>'[_dd<C-o>

" Clear search term
nnoremap <leader>? :let @/='^$cleared'<CR>:echo 'Search cleared'<CR>

" Select pasted text in visual mode
vnoremap an `[o`]
vnoremap in `[o`]
onoremap <silent> an :<C-u>normal! v`[o`]<CR>
onoremap <silent> in :<C-u>normal! v`[o`]<CR>
"}}}
" ---------- }}}1

"> AUTOCOMMANDS {{{1
" Terminal window specific settings {{{
aug terminal_open
  au!
  if (has('nvim'))
    au TermOpen * setlocal nonu | setlocal nornu | setlocal scrolloff=0
  else
    au TerminalWinOpen * setlocal nonu | setlocal nornu | setlocal scrolloff=0
  endif
aug end
"}}}

" Restore cursor position {{{
aug vim_startup
  au!
  au BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
aug end
"}}}

" Session saving on exit {{{
if (!has('nvim'))
aug session_save
  au!
  au VimLeave *
        \ if (get(g:, 'termdebug_is_running', 0))
        \ |   call TermDebugSendCommand('set confirm off')
        \ |   call TermDebugSendCommand('quit')
        \ |   while (get(g:, 'termdebug_is_running', 0))
        \ |     sleep 1m
        \ |   endwhile
        \ | endif
        \ | if (exists('v:this_session') && v:this_session != '')
        \ |   exe 'mksession! '..v:this_session
        \ | endif
aug end
endif
"}}}

" Auto complete {{{
" if (!has('nvim'))
aug auto_complete
  au!
  au TextChangedI * call AutoComplete()
  au CompleteDonePre * let b:autocomplete_debounce=1
  au InsertLeave * let b:autocomplete_debounce=0
aug end
" endif
"}}}

" Filetype specific {{{
aug vimrc_ft
  au!

  " Quickfix {{{
  au FileType qf nnoremap <buffer> <silent> Q :lclose<CR>
  "}}}

  " c/cpp {{{
  au FileType c,cpp,objc,objcpp
        \ setl foldmethod=syntax|
        \ nnoremap <buffer> <silent> <localleader>s :call CppSwitchSourceHeader(0)<CR>|
        \ nnoremap <buffer> <silent> <localleader>S :call CppSwitchSourceHeader(1)<CR>|
        \ command! -buffer -bang CppSwitchSourceHeader call CppSwitchSourceHeader(<bang>0)|
  "}}}

  " Java {{{
  au FileType java
        \ setl foldmethod=marker|
  "}}}

  " HTML {{{
  au FileType html
        \ inoremap <buffer> > ><C-x><C-o>
  "}}}

  " Quickfix {{{
  au FileType qf
        \ nnoremap <buffer> p <CR>:copen<CR>
  "}}}

aug end
"}}}

" CompleteDonePre {{{
aug retoggle_file_complete
  au!
  au CompleteDonePre *
        \ if complete_info()['mode'] == 'files' && v:completed_item != {}
        \ | call feedkeys("\<C-x>\<C-f>")
        \ | endif
aug end
"}}}

" Update breadcrumbs {{{
  aug lsp_update_breadcrumbs
    au!
    au CursorMoved * call UpdateLspDocumentBreadcrumbs(winnr())
    au WinEnter * call UpdateLspDocumentBreadcrumbs(winnr())
  aug end
"}}}

" Tabstop option change {{{
aug update_listchars_on_tabstop
  au!
  au OptionSet tabstop exe get(g:, 'listchars')
aug end
"}}}
" ---------- }}}1

"> PLUGINS {{{1
" Plugin options {{{
" markdown {{{
let g:markdown_recommended_style = 0
let g:markdown_folding = 1
let g:markdown_syntax_conceal = 1
let g:markdown_fenced_languages = ['sh', 'cpp', 'c', 'vim', 'html', 'python', 'bash=sh']
"}}}
" netrw {{{
let g:netrw_keepdir = 0
let g:netrw_winsize = 30
let g:netrw_banner = 0
"}}}
" vim-markdown {{{
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_folding_disabled = 1
"}}}
" markdown-preview {{{
let g:mkdp_auto_close = 0
let g:mkdp_markdown_css =  expand('$VIMCONFIGROOT/markdown.css')
"}}}
" FZF {{{
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 , 'border': 'sharp'} }
"}}}
" vim-vsnip {{{
let g:vsnip_snippet_dirs = [
      \ expand('$VIMCONFIGROOT/snippets'),
      \ ]
let g:vsnip_filetypes = {
      \   'c': ['cpp']
      \ }
"}}}
" vim-lsp {{{
let g:lsp_use_native_client = 0
let g:lsp_semantic_enabled = 1
let g:lsp_float_max_width = 0
let g:lsp_work_done_progress_enabled = 1
let g:lsp_async_completion = 1

let g:lsp_document_highlight_enabled = 0
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_document_symbol_detail = 0
let g:lsp_diagnostics_highlights_enabled = 1
let g:lsp_diagnostics_highlights_delay = 50
let g:lsp_diagnostics_signs_enabled = 1
let g:lsp_diagnostics_signs_delay = 50
let g:lsp_diagnostics_virtual_text_enabled = 1
let g:lsp_diagnostics_virtual_text_delay = 50
let g:lsp_diagnostics_virtual_text_align = 'after'
let g:lsp_diagnostics_virtual_text_wrap = 'truncate'
let g:lsp_diagnostics_virtual_text_padding_left = 2
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_float_delay = 200
let g:lsp_diagnostics_float_insert_mode_enabled = 0

let g:lsp_diagnostics_signs_hint = {'text': g:sign_hint}
let g:lsp_diagnostics_signs_information = {'text': g:sign_info}
let g:lsp_diagnostics_signs_warning = {'text': g:sign_warning}
let g:lsp_diagnostics_signs_error = {'text': g:sign_error}
let g:lsp_diagnostics_virtual_text_prefix = ' ■ '

aug register_lsp_servers
  au!
  au User lsp_setup call s:register_lsp_servers()
aug end
aug lsp_progress_updated
  au!
  au User lsp_progress_updated redrawtabline
aug end

function! s:register_lsp_servers()
  let servers = [
        \ { 'name': 'clangd',
        \   'allowlist': ['c', 'cpp', 'objc', 'objcpp'],
        \   'executable': 'clangd',
        \   'cmd': {server_info->[&shell, &shellcmdflag,
        \     'clangd --header-insertion=never --completion-style=detailed']
        \   },
        \ },
        \ { 'name': 'jdtls',
        \   'allowlist': ['java'],
        \   'executable': 'jdtls',
        \   'env': {'JAVA_HOME': '/usr/lib/jvm/java-21-openjdk'},
        \   'cmd': {server_info->[&shell, &shellcmdflag, 'jdtls']},
        \ },
        \ { 'name': 'phpactor',
        \   'allowlist': ['php'],
        \   'executable': 'phpactor',
        \   'cmd': {server_info->[&shell, &shellcmdflag, 'phpactor language-server']},
        \   'initialization_options': {
        \     'language_server_phpstan.enabled': v:true,
        \     'language_server_psalm.enabled': v:true
        \   }
        \ },
        \ { 'name': 'rust-analyzer',
        \   'allowlist': ['rust'],
        \   'executable': 'rust-analyzer',
        \   'cmd': {server_info->[&shell, &shellcmdflag, 'rust-analyzer']},
        \   'initialization_options': {
        \     'diagnostics': {
        \       'enable': v:true,
        \       'experimental': {'enable': v:true}
        \     },
        \     'cargo':{'allFeatures': v:true}
        \   }
        \ },
        \ { 'name': 'html-vscode',
        \   'allowlist': ['html'],
        \   'executable': 'vscode-html-language-server',
        \   'cmd': {server_info->[&shell, &shellcmdflag, 'vscode-html-language-server --stdio']},
        \   'initialization_options': {
        \     'provideFormatter':v:true
        \   }
        \ },
        \ { 'name': 'css-vscode',
        \   'allowlist': ['css'],
        \   'executable': 'vscode-css-language-server',
        \   'cmd': {server_info->[&shell, &shellcmdflag, 'vscode-css-language-server --stdio']},
        \ },
        \ { 'name': 'tsserver',
        \   'allowlist': ['javascript', 'typescript'],
        \   'executable': 'typescript-language-server',
        \   'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ },
        \ { 'name': 'omnisharp',
        \   'allowlist': ['cs'],
        \   'executable': 'omnisharp',
        \   'cmd': {server_info->[&shell, &shellcmdflag, 'omnisharp', '-lsp']},
        \ },
        \ { 'name': 'pylsp',
        \   'allowlist': ['python'],
        \   'executable': 'pylsp',
        \   'cmd': {server_info->[&shell, &shellcmdflag, 'pylsp']},
        \ },
        \ ]
  for s in servers
    if executable(get(s, 'executable', '0'))
      call lsp#register_server(s)
    endif
  endfor
endfunction

function! s:on_lsp_buffer_enabled() abort
  let g:tabline_lsp_diagnostics = 1
  let g:tabline_lsp_progress = 1
  let g:tabline_lsp_status = 1
  let g:statusline_lsp_diagnostics = 1
  let g:statusline_lsp_breadcrumbs = 1
  let g:statusline_lsp_progress = 1 " unused
  let g:statusline_lsp_status = 1 " unused
  setlocal signcolumn=yes
  setlocal omnifunc=lsp#complete
  " Enabling folding causes them to not restore and throw errors when
  " loading a session
  " set foldmethod=expr
  " set foldexpr=lsp#ui#vim#folding#foldexpr()
  " set foldtext=lsp#ui#vim#folding#foldtext()
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nnoremap <buffer> gd <plug>(lsp-definition)
  nnoremap <buffer> gD <plug>(lsp-declaration)
  nnoremap <buffer> gr <plug>(lsp-references)
  nnoremap <buffer> gi <plug>(lsp-implementation)
  nnoremap <buffer> K <plug>(lsp-hover-float)

  aug lsp_update_symbols
    au! * <buffer>
    au TextChanged <buffer> call UpdateLspDocumentSymbols(bufnr())
    au InsertLeave <buffer> call UpdateLspDocumentSymbols(bufnr())
  aug end

  call UpdateLspDocumentSymbols(bufnr())
endfunction

aug lsp_install
  au!
  " call s:on_lsp_buffer_enabled only for languages that has the server registered.
  au User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
aug end
"}}}
" Termdebug {{{
aug termdebug
  au!
  au User TermdebugStartPost wincmd r
        \| nnoremap <leader>dr :Run<CR>
        \| nnoremap <leader>db :Break<CR>
        \| nnoremap <leader>dc :Clear<CR>
        \| nnoremap <leader>ds :Stop<CR>
        \| nnoremap <F3>  :call TermDebugSendCommand('kill')<CR>
        \| nnoremap <F4>  :Run<CR>
        \| nnoremap <F5>  :Continue<CR>
        \| nnoremap <F6>  :Stop<CR>
        \| nnoremap <F8>  :Clear<CR>
        \| nnoremap <F9>  :Break<CR>
        \| nnoremap <F10> :Over<CR>
        \| nnoremap <F11> :Step<CR>
        \| nnoremap <F12> :Finish<CR>
        \| tnoremap <F3>  <C-w>:call TermDebugSendCommand('kill')<CR>
        \| tnoremap <F4>  <C-w>:Run<CR>
        \| tnoremap <F5>  <C-w>:Continue<CR>
        \| tnoremap <F6>  <C-w>:Stop<CR>
        \| tnoremap <F8>  <C-w>:Clear<CR>
        \| tnoremap <F9>  <C-w>:Break<CR>
        \| tnoremap <F10> <C-w>:Over<CR>
        \| tnoremap <F11> <C-w>:Step<CR>
        \| tnoremap <F12> <C-w>:Finish<CR>
  au User TermdebugStopPost
        \  nunmap <leader>dr
        \| nunmap <leader>db
        \| nunmap <leader>dc
        \| nunmap <leader>ds
        \| nunmap <F3>
        \| nunmap <F4>
        \| nunmap <F5>
        \| nunmap <F6>
        \| nunmap <F10>
        \| nunmap <F11>
        \| nunmap <F12>
        \| tunmap <F3>
        \| tunmap <F4>
        \| tunmap <F5>
        \| tunmap <F6>
        \| tunmap <F8>
        \| tunmap <F9>
        \| tunmap <F10>
        \| tunmap <F11>
        \| tunmap <F12>
aug END

let g:termdebug_config = {
      \ 'wide': 1,
      \ 'variables_window': v:true,
      \ 'variables_window_height': 15,
      \ }
"}}}
" vim-ai {{{
let initial_prompt =<< trim END
>>> system

You are going to play a role of a completion engine with following parameters:
Task: Provide compact code/text completion, generation or transformation
Topic: general programming and text editing
Style: Plain result without any commentary, explanations or markdown
Audience: Users of text editor and programmers that need to transform/generate text
END

let g:vim_ai_chat = {
      \   'engine': 'chat',
      \   'options': {
      \     'model': 'llama3',
      \     'endpoint_url': 'http://127.0.0.1:11434/v1/chat/completions',
      \     'enable_auth': 0,
      \   }
      \ }

let g:vim_ai_edit = g:vim_ai_chat
let g:vim_ai_edit['options']['initial_prompt'] = initial_prompt
let g:vim_ai_complete = g:vim_ai_edit
"}}}
"}}}

" Builtin plugins {{{
runtime ftplugin/man.vim
if (!has('nvim'))
packadd! editorconfig
packadd! comment
endif

packadd! matchit
packadd! termdebug
"}}}

" Plug init {{{
function! VimOnly(ls={})
  return has('nvim') ? {'on':[]} : a:ls
endfunction

function! NVimOnly(ls={})
  return !has('nvim') ? {'on':[]} : a:ls
endfunction

if (empty(glob('~/.vim/autoload/plug.vim')))
  " silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
  "   \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  finish
else
  source ~/.vim/autoload/plug.vim
endif

" Run PlugInstall if there are missing plugins
" autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
"   \| PlugInstall --sync | source $MYVIMRC
" \| endif
"}}}

" Plugin list {{{
call plug#begin('~/.vim/plugged')
" Plug 'girishji/devdocs.vim'
Plug 'junegunn/fzf.vim'
Plug 'xuhdev/vim-latex-live-preview', {'for': 'tex'}
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'prabirshrestha/vim-lsp', VimOnly() " LSP support
"Plug 'mattn/vim-lsp-settings'
Plug 'hrsh7th/vim-vsnip' " Snippets
Plug 'hrsh7th/vim-vsnip-integ' " LSP snippet support
Plug 'aklt/plantuml-syntax' " PlantUML syntax
Plug 'godlygeek/tabular'
if (has('python3'))
  Plug 'madox2/vim-ai'
endif
Plug 'lifepillar/vim-colortemplate'
call plug#end()
"}}}

" TODO this does not work when lazy loading plugins
" Plugin enter {{{
function! PluginEnter()
  " vsnip {{{
  if (exists('*vsnip#get_context'))
    function! CompleteVsnip(findstart, base)
      if a:findstart
        " locate the start of the word
        let line = getline('.')
        let start = col('.') - 1
        while start > 0 && line[start - 1] !~ '\s'
          let start -= 1
        endwhile
        return start
      else
        let ret = []
        let current_buffer = bufnr('%')
        let ctx = vsnip#get_context()
        let snippets = vsnip#get_complete_items(current_buffer)

        for s in snippets
          if s.word =~ '^' .. a:base
            call add(ret, s)
          endif
        endfor
        eval ret->sort({i1, i2 -> i1.word == i2.word ?
              \ 0 : i1.word > i2.word ? 1 : -1})

        return ret == [] ? v:null : ret
      endif
    endfunction
    imap <expr> <CR>     pumvisible() && vsnip#expandable() ?
          \ '<Plug>(vsnip-expand)'    : '<CR>'
    imap <expr> <Tab>   vsnip#jumpable(1)  ?
          \ '<Plug>(vsnip-jump-next)' : '<Tab>'
    smap <expr> <Tab>   vsnip#jumpable(1)  ?
          \ '<Plug>(vsnip-jump-next)' : '<Tab>'
    imap <expr> <S-Tab> vsnip#jumpable(-1) ?
          \ '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
    smap <expr> <S-Tab> vsnip#jumpable(-1) ?
          \ '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
    set completefunc=CompleteVsnip
  endif
  "}}}

  " fzf {{{
  if (exists(':FZF'))
    nmap <leader>F :Files<CR>
    nmap <leader>G :GFiles<CR>
    nmap <leader>B :Buffers<CR>
  endif
  "}}}

  " vim-lsp {{{
  if (get(g:, 'lsp_loaded', 0))
    nnoremap <expr> <leader>lsD lsp#disable_diagnostics_for_buffer()
    nnoremap <expr> <leader>lsd lsp#enable_diagnostics_for_buffer()
    nnoremap <leader>la <plug>(lsp-code-action-float)
    nnoremap <leader>lr <plug>(lsp-rename)
    nnoremap <leader>li :LspStatus<CR>
    nnoremap <leader>lk <plug>(lsp-hover-preview)
    nnoremap <leader>ld <plug>(lsp-document-diagnostics)
    nnoremap <leader>ll <plug>(lsp-code-lens)
    nnoremap <leader>lf <plug>(lsp-document-format)
    vnoremap <leader>lf <plug>(lsp-document-range-format)

    nnoremap <buffer> [g <plug>(lsp-previous-error)
    nnoremap <buffer> ]g <plug>(lsp-next-error)
    nnoremap <buffer> [d <plug>(lsp-previous-diagnostic)
    nnoremap <buffer> ]d <plug>(lsp-next-diagnostic)
    inoremap <C-s> <C-o><plug>(lsp-signature-help)

    inoremap <buffer> <expr><C-d>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(+4):'<C-d>'
    inoremap <buffer> <expr><C-u>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(-4):'<C-u>'
    nnoremap <buffer> <expr><C-d>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(+4):'<C-d>'
    nnoremap <buffer> <expr><C-u>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(-4):'<C-u>'
    inoremap <buffer> <expr><C-e>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(+1):'<C-e>'
    inoremap <buffer> <expr><C-y>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(-1):'<C-y>'
    nnoremap <buffer> <expr><C-e>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(+1):'<C-e>'
    nnoremap <buffer> <expr><C-y>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(-1):'<C-y>'
  endif
  "}}}
endfunction
"}}}

" Callbacks after loading {{{
if v:vim_did_enter
  call PluginEnter()
else
  aug PluginEnter
    au!
    au VimEnter * call PluginEnter()
  aug end
endif
"}}}

" ---------- }}}1

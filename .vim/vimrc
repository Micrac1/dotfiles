" so $VIM/vimrc
"so $VIMRUNTIME/defaults.vim
set nocompatible
if (!has("nvim"))
set viminfofile=$HOME/.vim/viminfo
endif

if has('gui_running')
	set belloff=all
	set guioptions-=L
	set guioptions-=T
	set guioptions-=m
	set guioptions-=r
	let g:netrw_liststyle=3
	" colorscheme slate
	colorscheme default
	set guifont=Bitstream\ Vera\ Sans\ Mono\ 10
endif

" Should be bg& to let it determine itself and done automatically, but that is broken
set background=dark

set sessionoptions=blank,buffers,curdir,folds,help,tabpages,winpos,winsize,resize,terminal
set splitbelow
set splitright
set winminheight=0
set winminwidth=0
set number
set relativenumber
set ruler
set wildmenu
set wildoptions=pum " Vertical wild menu in cmdline
set showcmd
set lazyredraw " don't update during macros
set scrolloff=8
set timeout
set timeoutlen=1000
set ttimeout
set ttimeoutlen=0
set mouse=n
set hidden
set fillchars=vert:â•‘

filetype plugin indent on

set tabstop=2
set shiftwidth=2
" set softtabstop=2
set expandtab
set incsearch
set hlsearch
set noundofile
set noswapfile
set nobackup
set encoding=utf-8
set completeopt=menu,menuone,preview,noinsert
syntax enable

if (!has("nvim"))
set laststatus=2 " Statusline
set statusline=%!MyStatusLine()
set tabline=%!MyTabLine() " Tabline
endif

" Some global variables
let g:sign_error = 'E'
let g:sign_warning = 'â€¼'
let g:sign_hint = 'H'
let g:sign_info = 'i'

"TabLine        xxx term=underline cterm=reverse ctermfg=15 ctermbg=242 gui=underline guibg=DarkGrey
"TabLineFill    xxx term=reverse cterm=reverse gui=reverse
"TabLineSel     xxx term=bold cterm=bold gui=bold

" =FUNCTIONS====================
function! DefaultColorschemeFix()
  hi! link SignColumn Normal
  hi! link Pmenu Normal
  hi! TabLine cterm=reverse
endfunction

function! GetLspProgressString()
  let s = ''
  let pp = lsp#get_progress()
  "[{'token': 'rustAnalyzer/Indexing',
  "'title': 'Indexing', 'server': 'rust-analyzer'}]
  "'percentage': 16,
  "'message': '1/6 (core)',
  if (pp != [])
    let p = pp[0]
    let s .= '['.p.server.'] '.p.title.' '.p.message
  endif
  return s
endfunction

function! GetLspStatusString()
  let s = ''
  let status = lsp#collect_server_status()
  for key in keys(status)
    if (status[key].status == 'running')
      let s .= (s == '' ? '' : ', ').key
    endif
  endfor
  return s != '' ? '['.s.']' : s
endfunction

function! GetLspDiagnostics(id)
  if (exists('*lsp#internal#diagnostics#state#_get_diagnostics_count_for_buffer'))
    return lsp#internal#diagnostics#state#_get_diagnostics_count_for_buffer(a:id)
  endif
  return {'information': 0, 'hint': 0, 'warning': 0, 'error': 0}
endfunction

function! GetLspDiagnosticsString(table, color)
  let s = ''
  if (a:table.information)
    let s .= s == '' ? '' : a:color.' '
    let s .= ''.g:sign_info.a:table.information
  endif
  if (a:table.hint)
    let s .= s == '' ? '' : a:color.' '
    let s .= ''.g:sign_hint.a:table.hint
  endif
  if (a:table.warning)
    let s .= s == '' ? '' : a:color.' '
    let s .= '%#Todo#'.g:sign_warning.a:table.warning
  endif
  if (a:table.error)
    let s .= s == '' ? '' : a:color.' '
    let s .= '%#Error#'.g:sign_error.a:table.error
  endif
  return s
endfunction

function! MyTabLine()
  let s = ''
  let s .= '%#TabLineSel#'
  let s .= ' '

  for i in range(tabpagenr('$'))
    let n = (i + 1)
    let color = n == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#'
    let buflist = tabpagebuflist(n)
    let fullname = bufname(buflist[tabpagewinnr(n) - 1])
    let filename = fnamemodify(fullname, ':t')

    " Diagnostics calculation
    let diagnosticsstring = ''
    if (get(g:, 'tabline_lsp_diagnostics', 0))
      let d = {'information': 0, 'hint': 0, 'warning': 0, 'error': 0}
      for bufnr in buflist
        let tmp = GetLspDiagnostics(bufnr)
        let d.information += tmp.information
        let d.hint += tmp.hint
        let d.warning += tmp.warning
        let d.error += tmp.error
      endfor
      let diagnosticsstring = GetLspDiagnosticsString(d, color)
    endif

    " Begin tab
    let s .= '%' . n . 'T'

    let s .= color
    let s .= ' '
    " Tab number
    let s .= ''.n.'.'

    "let s .= '['
    "let s .= tabpagewinnr(a:n, '$')
    "let s .= '] '

    let s .= color

    " Filename
    let s .= filename == '' ? ' [No Name] ' : ' '.pathshorten(fnamemodify(fullname, ":~:.")).' '

    " Diagnostics
    let s .= diagnosticsstring
    let s .= color
    let s .= diagnosticsstring == '' ? '' : ' '

    " Modified indicator
    let modified = 0
    for bufnr in buflist
      if getbufvar(bufnr, '&modified')
        let modified = 1
        break
      endif
    endfor
    if (modified)
      let s .= '[+]'
    else
      let s .= ''
    endif
    let s .= ' '

    " Separator
    let s .= '%#TabLineSel#'
    "let s .= n != tabpagenr('$') ? ' ' : ''
    let s .= ' '
  endfor

  " Rest of the line
  let s .= '%T%#TabLineFill#'
  if tabpagenr('$') > 1
    let s .= '%=;)'
  endif

  return s
endfunction

" Statusline
function! MyStatusLine()
  let d = get(g:, 'statusline_lsp_diagnostics', 0) ?
        \ GetLspDiagnosticsString(GetLspDiagnostics(winbufnr(g:statusline_winid)), '') : ''
  let s = "%f ".d."%*
    \%h%m%r %=%<
    \%( %{&fenc != '' ? &fenc . ' /' : ''}%)
    \%( %{%&ff != '' ? get({'unix':'U','dos':'D','mac':'M'}, &ff) . ' /' : ''%}%)
    \%( %{&ft != '' ? &ft . ' /':''}%)
    \%(  %l:%c%V%)  %P"
  return s
endfunction

" Switch source and header files
function! SwitchSourceHeader(force)
  let extension = expand("%:e")
  let fullpath = expand('%:p:r')

  " CPP
  if (extension == "cpp")
    if (filereadable(fullpath.'.hpp'))
      exe 'edit '.fullpath.'.hpp'
    elseif (filereadable(fullpath.'.h') || a:force)
      exe 'edit '.fullpath.'.h'
    endif
  " C
  elseif (extension == "c")
    if (filereadable(fullpath.'.h') || a:force)
      exe 'edit '.fullpath.'.h'
    endif
  " H
  elseif (extension == "h")
    if (filereadable(fullpath.'.c'))
      exe 'edit '.fullpath.'.c'
    elseif (filereadable(fullpath.'.cpp') || a:force) " assume cpp file
      exe 'edit '.fullpath.'.cpp'
    endif
  " HPP
  elseif (extension == "hpp")
    if (filereadable(fullpath.'.cpp') || a:force)
      exe 'edit '.fullpath.'.cpp'
    endif
  else
    echo "Can not switch source/header: not a source/header file."
  endif
endfunction
"map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>

" Close empty nameless buffers
function! CleanNoNameEmptyBuffers()
" TODO make it so this does not close them on other tabs
    let buffers = filter(range(1, bufnr('$')), 'buflisted(v:val)
      \ && empty(bufname(v:val)) && empty(win_findbuf(v:val))
      \ && (getbufline(v:val, 1, "$") == [""])')
    if !empty(buffers)
        exe 'bd ' . join(buffers, ' ')
        echo len(buffers) . ' buffer' . (len(buffers) != 1 ? 's' : '') . ' deleted'
    else
        echo 'No buffer deleted'
    endif
endfunction

" Call some of the functions
call DefaultColorschemeFix()

" Expose some of the functions
command! CleanNoNameEmptyBuffers call CleanNoNameEmptyBuffers()


" =KEYBINDS=====================
let mapleader=" "

if (!has("nvim"))
" Terminal fuckery (needs to be rebound to avoid waiting for timeout on <esc>)
set <A-h>=h
set <A-j>=j
set <A-k>=k
set <A-l>=l

set <A-1>=1
set <A-2>=2
set <A-3>=3
set <A-4>=4
set <A-5>=5
set <A-6>=6
set <A-7>=7
set <A-8>=8
set <A-9>=9
set <A-n>=n
set <A-p>=p
set <A-f>=f
set <A-e>=e
endif

map Q gq
sunmap Q

" Funny stuff
nnoremap <silent> <esc> :silent noh<CR>
nnoremap <leader> <Nop>

" Change marks
"nnoremap <Space><Space> /<++><CR>c4l
"nnoremap <leader>m i<++><Esc>l

" Configuring
nnoremap <leader>r :so $MYVIMRC<CR>
nnoremap <leader>E :tabnew $MYVIMRC<CR>

" C++ helpers
"nnoremap <leader>inc a#include 
"nnoremap <leader>ifn a#ifndef <++><CR>#define <++><CR>#endif<Esc>?<++><CR>n<C-v>j3lc

" Window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Window resize
nnoremap <silent> <A-h> :vertical resize -2<CR>
nnoremap <silent> <A-j> :resize +2 <CR>
nnoremap <silent> <A-k> :resize -2 <CR>
nnoremap <silent> <A-l> :vertical resize +2<CR>

" Fullscreen window
nnoremap <A-f> <c-w>_<c-w>\|
nnoremap <A-e> <c-w>=

" Buffers
nnoremap <leader>b :ls<CR>:b<Space>
nnoremap <leader>D :ls<CR>:bd<Space>
nnoremap <leader>n :bnext<CR>
nnoremap <leader>p :bprev<CR>
nnoremap <leader>x :bd<CR>
nnoremap <leader>X :bd!<CR>
nnoremap <leader>e :enew<CR>
nnoremap <leader><Tab> <C-^>

" Tabs
nnoremap <leader>tn :tabnew<CR>
nnoremap <leader>te :tabedit<Space>
"nnoremap <leader>tx :tabclose<CR>

nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt

nnoremap <silent> <leader>tm1 :tabmove 0<CR>
nnoremap <silent> <leader>tm2 :tabmove 2<CR>
nnoremap <silent> <leader>tm3 :tabmove 3<CR>
nnoremap <silent> <leader>tm4 :tabmove 4<CR>
nnoremap <silent> <leader>tm5 :tabmove 5<CR>
nnoremap <silent> <leader>tm6 :tabmove 6<CR>
nnoremap <silent> <leader>tm7 :tabmove 7<CR>
nnoremap <silent> <leader>tm8 :tabmove 8<CR>
nnoremap <silent> <leader>tm9 :tabmove 9<CR>

" Terminal fixes
tnoremap <C-x> <C-\><C-n>
tnoremap <C-w> <C-w>.
tnoremap <C-\>" <C-w>"
tnoremap <C-\><C-x> <C-x>

" Movement in insert mode
inoremap <C-h> <left>
inoremap <C-j> <down>
inoremap <C-k> <up>
inoremap <C-l> <right>

" Moving lines
nnoremap <A-n> :m .+1<cr>==
nnoremap <A-p> :m .-2<cr>==
vnoremap <A-n> :m '>+1<cr>gv=gv
vnoremap <A-p> :m '<-2<cr>gv=gv

" Matching pairs
if (!has("nvim")) " nvim has plugin for this
inoremap <s-tab> <nop>
inoremap " ""<C-G>U<left>
inoremap "<esc> "<esc>
inoremap <S-tab>" "
inoremap "" ""

inoremap ' ''<C-G>U<left>
inoremap '<esc> '<esc>
inoremap <S-tab>' '
inoremap '' ''

inoremap ( ()<C-G>U<left>
inoremap (<esc> (<esc>
inoremap <S-tab>( (
inoremap () ()

inoremap [ []<C-G>U<left>
inoremap [<esc> [<esc>
inoremap <S-tab>[ [
inoremap [] []

inoremap { {}<C-G>U<left>
inoremap {<esc> {<esc>
inoremap <S-tab>{ {
inoremap {} {}
inoremap {<CR> {<CR>}<C-G>U<up><end><CR>

inoremap < <><C-G>U<left>
inoremap <<esc> <<esc>
inoremap <S-tab>< <
inoremap <<Space> <
inoremap <= <=
inoremap << <<
endif

if (!has("nvim"))
" Autocomplete
inoremap <silent> <C-@> <C-x><C-o>
imap <expr> <CR> pumvisible() ? '<c-y>' : '<CR>'
endif

nnoremap <silent> <leader>s :call SwitchSourceHeader(0)<CR>
nnoremap <silent> <leader>S :call SwitchSourceHeader(1)<CR>


" =AUTOCOMMANDS=================
aug default_colorscheme_fix
  au!
  au ColorScheme default call DefaultColorschemeFix()
aug end

" Restore cursor position
aug vimStartup
  au!
  au BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
aug end
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

if (has("nvim"))|finish|endif " everything after this is regular vim specific

aug session_save
  au!
  au VimLeave * if (exists('v:this_session') && v:this_session != '') | exe 'mksession! '.v:this_session | endif
aug end

" Plugins
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-commentary' " Toggle comments
Plug 'xuhdev/vim-latex-live-preview', {'for': 'tex'}
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install', 'for': ['markdown', 'vim-plug']}
Plug 'prabirshrestha/vim-lsp' " LSP support
"Plug 'rafamadriz/friendly-snippets'
Plug 'hrsh7th/vim-vsnip' " Snippets
Plug 'hrsh7th/vim-vsnip-integ' " LSP snippet support
Plug 'aklt/plantuml-syntax' " PlantUML syntax
" Colorschemes
Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'
call plug#end()

aug PluginEnter
  au!
  au VimEnter * call PluginEnter()
aug end

function! PluginEnter()
  " vsnip
  if (exists('*vsnip#get_context'))
    function! CompleteVsnip(findstart, base)
      if a:findstart
        " locate the start of the word
        let line = getline('.')
        let start = col('.') - 1
        while start > 0 && line[start - 1] !~ '\s'
          let start -= 1
        endwhile
        return start
      else
        let ret = []
        let current_buffer = bufnr('%')
        let ctx = vsnip#get_context()
        let snippets = vsnip#get_complete_items(current_buffer)

        for s in snippets
          if s.word =~ '^' .. a:base
            call add(ret, s)
          endif
        endfor
        eval ret->sort({i1, i2 -> i1.word == i2.word ? 0 : i1.word > i2.word ? 1 : -1})

        return ret == [] ? v:none : ret
      endif
    endfunction
    imap <expr> <CR>     pumvisible() && vsnip#expandable() ? '<Plug>(vsnip-expand)'    : '<CR>'
    imap <expr> <Tab>   !pumvisible() && vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
    smap <expr> <Tab>   !pumvisible() && vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
    imap <expr> <S-Tab> !pumvisible() && vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
    smap <expr> <S-Tab> !pumvisible() && vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
    set completefunc=CompleteVsnip
  endif
endfunction

" vim-vsnip
let g:vsnip_snippet_dir=fnamemodify(expand('$MYVIMRC'), ':p:h').'/vsnip'

" vim-lsp
let g:lsp_diagnostics_virtual_text_align = 'after'
let g:lsp_diagnostics_virtual_text_wrap = 'truncate'
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_semantic_enabled = 1
let g:lsp_float_max_width = 0
let g:lsp_diagnostics_highlights_delay = 50
let g:lsp_diagnostics_signs_delay = 50
let g:lsp_diagnostics_virtual_text_delay = 50
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_float_insert_mode_enabled = 0
let g:lsp_diagnostics_float_delay = 200
let g:lsp_work_done_progress_enabled=1
let g:lsp_async_completion=1

let g:lsp_diagnostics_signs_hint = {'text': g:sign_hint}
let g:lsp_diagnostics_signs_information = {'text': g:sign_info}
let g:lsp_diagnostics_signs_warning = {'text': g:sign_warning}
let g:lsp_diagnostics_signs_error = {'text': g:sign_error}

aug register_lsp_servers
  au!
  au User lsp_setup call s:register_lsp_servers()
aug end

function! s:register_lsp_servers()
  let servers = [
        \ { 'name': 'clangd',
        \   'allowlist': ['c', 'cpp', 'objc', 'objcpp'],
        \   'cmd': {server_info->['clangd', '--header-insertion=never']},
        \ },
        \ { 'name': 'phpactor',
        \   'allowlist': ['php'],
        \   'cmd': {server_info->['phpactor', 'language-server']},
        \ },
        \ { 'name': 'rust-analyzer',
        \   'allowlist': ['rust'],
        \   'cmd': {server_info->['rust-analyzer']},
        \   'initialization_options': {
        \     'diagnostics': {
        \       'enable': v:true,
        \       'experimental': {'enable': v:true}
        \     },
        \     'cargo':{'allFeatures': v:true}
        \   }
        \ },
        \ { 'name': 'css-vscode',
        \   'allowlist': ['css'],
        \   'cmd': {server_info->['vscode-css-language-server', '--stdio']},
        \ },
        \ ]
  for s in servers
    if executable(servers[1].cmd(s)[0])
      call lsp#register_server(s)
    endif
  endfor
endfunction

aug lsp_highlight
  au!
  au ColorScheme *
    \ if (filereadable(fnamemodify(expand('$MYVIMRC'), ':p:h').'/lsp_highlight.vim'))
    \ | exe "so ".fnamemodify(expand('$MYVIMRC'), ':p:h').'/lsp_highlight.vim'
    \ | endif
aug end

function! s:on_lsp_buffer_enabled() abort
    let g:tabline_lsp_diagnostics=1
    let g:tabline_lsp_progress=1
    let g:tabline_lsp_status=1
    let g:statusline_lsp_diagnostics=1
    let g:statusline_lsp_progress=1 " unused
    let g:statusline_lsp_status=1 " unused
    set signcolumn=yes
    setlocal omnifunc=lsp#complete
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nnoremap <buffer> gd <plug>(lsp-definition)
    nnoremap <buffer> gD <plug>(lsp-declaration)
    nnoremap <buffer> gr <plug>(lsp-references)
    nnoremap <buffer> gi <plug>(lsp-implementation)
    "nmap <buffer> gt <plug>(lsp-type-definition)
    "nmap <buffer> gs <plug>(lsp-document-symbol-search)
    "nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nnoremap <buffer> <leader>ca <plug>(lsp-code-action)
    nnoremap <buffer> <leader>cr <plug>(lsp-rename)
    nnoremap <buffer> [g <plug>(lsp-previous-diagnostic)
    nnoremap <buffer> ]g <plug>(lsp-next-diagnostic)
    nnoremap <buffer> K <plug>(lsp-hover-float)
    nnoremap <buffer> <leader>K <plug>(lsp-hover-preview)
    nnoremap <buffer> <leader>fk <plug>(lsp-document-diagnostics)
    nnoremap <buffer> <leader>fm <plug>(lsp-document-format)
    vnoremap <buffer> <leader>fm <plug>(lsp-document-range-format)
    inoremap <buffer> <C-s> <C-o><plug>(lsp-signature-help)
    inoremap <buffer> <expr><c-d>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(+4):'<C-d>'
    inoremap <buffer> <expr><c-u>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(-4):'<C-u>'
    nnoremap <buffer> <expr><c-d>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(+4):'<C-d>'
    nnoremap <buffer> <expr><c-u>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(-4):'<C-u>'
    "inoremap <buffer> <expr><c-d>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(+4):'<C-d>'
    "inoremap <buffer> <expr><c-u>
          \ lsp#document_hover_preview_winid() ? lsp#scroll(-4):'<C-u>'
    " Autocomplete
    inoremap <buffer> :: ::<C-x><C-o>
    inoremap <buffer> . .<C-x><C-o>
    inoremap <buffer> -> -><C-x><C-o>
    let g:agressive_lsp=1
    au TextChangedI * if (get(g:, 'agressive_lsp', 0)) | call feedkeys("\<c-x>\<C-o>") | endif
endfunction

aug lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    au User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
aug end

" vim-markdown
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_folding_disabled=1
let g:mkdp_auto_close = 0

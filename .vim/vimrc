" so $VIM/vimrc
"so $VIMRUNTIME/defaults.vim
set nocompatible
set viminfofile=$HOME/.vim/viminfo

if has('gui_running')
	set belloff=all
	set guioptions-=L
	set guioptions-=T
	set guioptions-=m
	set guioptions-=r
	let g:netrw_liststyle=3
	" colorscheme slate
	colorscheme default
	set guifont=Bitstream\ Vera\ Sans\ Mono\ 10
endif

" Tabline colors for tty
hi TabLine cterm=reverse

set sessionoptions=blank,buffers,curdir,folds,help,tabpages,winpos,winsize,resize,terminal
set splitbelow
set splitright
set number
set relativenumber
set ruler
set wildmenu
set wildoptions=pum " Vertical wild menu in cmdline
set showcmd
set lazyredraw
set scrolloff=8
set timeout
set timeoutlen=1000
set ttimeout
set ttimeoutlen=50
set mouse=n
set hidden

filetype plugin indent on

set tabstop=2
set shiftwidth=2
" set softtabstop=2
set expandtab
syntax on
set incsearch
set hlsearch
set noundofile
set noswapfile
set nobackup
set encoding=utf-8
set completeopt=menu,menuone,preview
let mapleader=" "

" Terminal fuckery (needs to be rebound to avoid waiting for timeout on <esc>)
set <A-h>=h
set <A-j>=j
set <A-k>=k
set <A-l>=l

set <A-1>=1
set <A-2>=2
set <A-3>=3
set <A-4>=4
set <A-5>=5
set <A-6>=6
set <A-7>=7
set <A-8>=8
set <A-9>=9

map Q gq
sunmap Q

" Funny stuff
nnoremap <silent> <esc> :silent noh<CR>
nnoremap <leader> <Nop>

" Change marks
"nnoremap <Space><Space> /<++><CR>c4l
"nnoremap <leader>m i<++><Esc>l

" Encoding
"nnoremap <leader>u :set encoding=latin1<CR>
"nnoremap <leader>U :set encoding=utf-8<CR>

" Fonts (gui only)
"nnoremap <leader>fw :set guifont=Bitstream\ Vera\ Sans\ Mono\ 10<CR>
"nnoremap <leader>fe :set guifont=Bitstream\ Vera\ Sans\ Mono\ 12<CR>
"nnoremap <leader>fr :set guifont=Bitstream\ Vera\ Sans\ Mono\ 16<CR>

" Configuring
nnoremap <leader>r :so $MYVIMRC<CR>
nnoremap <leader>E :tabnew $MYVIMRC<CR>

" C++ helpers
"nnoremap <leader>inc a#include 
"nnoremap <leader>ifn a#ifndef <++><CR>#define <++><CR>#endif<Esc>?<++><CR>n<C-v>j3lc

" Window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Window resize
nnoremap <silent> <A-h> :vertical resize -2<CR>
nnoremap <silent> <A-j> :resize +2 <CR>
nnoremap <silent> <A-k> :resize -2 <CR>
nnoremap <silent> <A-l> :vertical resize +2<CR>

" Buffers
nnoremap <leader>b :ls<CR>:b<Space>
nnoremap <leader>d :ls<CR>:bd<Space>
nnoremap <leader>n :bnext<CR>
nnoremap <leader>p :bprev<CR>
nnoremap <leader>x :bd<CR>
nnoremap <leader>X :bd!<CR>
nnoremap <leader>e :enew<CR>
nnoremap <leader><Tab> <C-^>

" Tabs
nnoremap <leader>tn :tabnew<CR>
nnoremap <leader>tx :tabclose<CR>

nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt

" Terminal fixes
tnoremap <C-x> <C-\><C-n>
tnoremap <C-w> <C-w>.
tnoremap <C-\><C-x> <C-x>

" Movement in insert mode
inoremap <C-h> <left>
inoremap <C-j> <down>
inoremap <C-k> <up>
inoremap <C-l> <right>

" Matching pairs
inoremap " ""<C-G>U<left>
inoremap "<esc> "<esc>
inoremap "" ""

inoremap ' ''<C-G>U<left>
inoremap '<esc> '<esc>
inoremap '' ''

inoremap ( ()<C-G>U<left>
inoremap (<esc> (<esc>
inoremap () ()

inoremap [ []<C-G>U<left>
inoremap [<esc> [<esc>
inoremap [] []

inoremap { {}<C-G>U<left>
inoremap {<esc> {<esc>
inoremap {} {}

inoremap < <><C-G>U<left>
inoremap <<esc> <<esc>
inoremap <<Space> < 
inoremap <= <=
inoremap << <<

" Statusline
set laststatus=2
set statusline=%!MyStatusLine()
function! MyStatusLine()
  let s = "%<%f %h%m%r %=
    \%( %{&fenc != '' ? &fenc . ' /' : ''}%)
    \%( %{%&ff != '' ? get({'unix':'U','dos':'D','mac':'M'}, &ff) . ' /' : ''%}%)
    \%( %{&ft != '' ? &ft . ' /':''}%)
    \%(  %l:%c%V%)  %P"
  return s
endfunction

" Tabline
set tabline=%!MyTabLine()
function! MyTabLine()
  let s = ''

  for i in range(tabpagenr('$'))
    let n = (i + 1)
    let color = n == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#'
    let buflist = tabpagebuflist(n)
    let fullname = bufname(buflist[tabpagewinnr(n) - 1])
    let filename = fnamemodify(fullname, ':t')

    " Begin tab
    let s .= color
    let s .= '%' . n . 'T '

    "let s .= '['
    "let s .= tabpagewinnr(a:n, '$')
    "let s .= '] '

    " Modified indicator
    for bufnr in buflist
      if getbufvar(bufnr, '&modified')
        " let s .= '%#Error#[+]' . color . ' '
        let s .= '[+] '
        break
      endif
    endfor

    " Filename
    let s .= filename == '' ? '[No Name]' : pathshorten(fnamemodify(fullname, ":~:."))
    let s .= ' '

    " Separator
    let s .= '%#TabLine#'
    " let s .= n != tabpagenr('$') ? '|' : ''
    let s .= n != tabpagenr('$') ? '|' : ''
  endfor

  " Rest of the line
  let s .= '%T%#TabLineFill#'
  if tabpagenr('$') > 1
    let s .= '%=;)'
  endif

  return s
endfunction

" TODO make it so this does not close them on other tabs
function! CleanNoNameEmptyBuffers()
    let buffers = filter(range(1, bufnr('$')), 'buflisted(v:val) 
      \ && empty(bufname(v:val)) && empty(win_findbuf(v:val))
      \ && (getbufline(v:val, 1, "$") == [""])')
    if !empty(buffers)
        exe 'bd '.join(buffers, ' ')
    else
        echo 'No buffer deleted'
    endif
endfunction

" Restore cursor position
aug vimStartup
  au!
  au BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
aug END

" Plugins
call plug#begin('~/.vim/plugged')
Plug 'xuhdev/vim-latex-live-preview', {'for': 'tex'}
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'prabirshrestha/vim-lsp'
call plug#end()

" vim-lsp
if executable('clangd')
  aug lsp_clangd
    au!
    au User lsp_setup call lsp#register_server({
          \ 'name': 'clangd',
          \ 'cmd': {server_info->['clangd']},
          \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
          \ })
    autocmd FileType c,cpp,objc,objcpp setlocal omnifunc=lsp#complete
  aug end
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gD <plug>(lsp-declaration)
    "nmap <buffer> gs <plug>(lsp-document-symbol-search)
    "nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    "nmap <buffer> gt <plug>(lsp-type-definition)
    "nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-d> lsp#document_hover_preview_winid() ? lsp#scroll(+4):'<C-d>'
    nnoremap <buffer> <expr><c-u> lsp#document_hover_preview_winid() ? lsp#scroll(-4):'<C-u>'
    "inoremap <buffer> <expr><c-d> lsp#document_hover_preview_winid() ? lsp#scroll(+4):'<C-d>'
    "inoremap <buffer> <expr><c-u> lsp#document_hover_preview_winid() ? lsp#scroll(-4):'<C-u>'

    " refer to doc to add more commands
endfunction
aug lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    au User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
aug END
let g:lsp_diagnostics_virtual_text_align = 'after'
let g:lsp_diagnostics_virtual_text_wrap = 'truncate'

" vim-markdown
let g:vim_markdown_new_list_item_indent = 0

" Hexokinase
let g:Hexokinase_ftEnabled = []
let g:Hexokinase_highlighters = [ 'sign_column', 'background', 'backgroundfull', 'foreground', 'foregroundfull' ]

let g:Hexokinase_optInPatterns = [ 'full_hex', 'triple_hex', 'rgb', 'rgba', 'hsl', 'hsla', 'colour_names' ]

let g:vim_markdown_folding_disabled=1
